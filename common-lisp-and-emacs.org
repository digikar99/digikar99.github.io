#+HTML_HEAD: <meta charset="utf-8">
#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="others.css">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="common.css">
#+OPTIONS: toc:nil num:nil html-postamble:nil title:nil
#+TITLE: Common Lisp and Emacs

#+html: <nav>
[[file:index.html][Home]] | [[file:ai-cogsci.html][AI and CogSci]] | *COMMON LISP AND EMACS* | [[file:miscellaneous.html][Miscellaneous]]
#+html: </nav>

#+html: <br>

* On This Page
:PROPERTIES:
:TOC:      :include all :depth 2 :ignore this
:END:

:CONTENTS:
- [[#major-common-lisp-related-projects][Major Common Lisp-related Projects]]
  - [[#1-python-libraries-for-common-lisp][1. Python libraries for Common Lisp]]
  - [[#2-fast-math-library-for-common-lisp][2. Fast math library for Common Lisp]]
  - [[#3-peltadot-peltadot-extends-lisps-types-and-dispatches-over-them][3. PELTADOT: PELTADOT Extends Lisp's Types And Dispatches Over Them]]
- [[#conda-lisp][Conda Lisp]]
:END:


* Major Common Lisp-related Projects
:PROPERTIES:
:CUSTOM_ID: major-common-lisp-related-projects
:END:

My major Lisp projects can be divided into three broad themes.

** 1. Python libraries for Common Lisp
:PROPERTIES:
:CUSTOM_ID: 1-python-libraries-for-common-lisp
:END:

[[https://www.quora.com/What-is-your-favourite-non-mainstream-programming-language/answer/Shubhamkar-Ayare?ch=10&share=3d935d6a&srid=tWo7][Common Lisp is a superb tool.]] Unfortunately, its ecosystem vastly lags behind mainstream languages like Python. As one of my past-times, I have been working to provide facilities for calling Python functions and callables from Lisp. There are two major approaches to this:

- [[https://github.com/digikar99/py4cl2][Through interprocess communication]] (builds upon [[https://github.com/bendudson/py4cl][bendudson/py4cl]])
- [[https://github.com/digikar99/py4cl2-cffi][By embedding python using its C-API]]

The former is robust but slow. The latter is fast but relatively brittle. I'm certainly not the first one to attempt this. You can find more about the latter approach - as well as the open issues - from [[https://doi.org/10.5281/zenodo.10997435][this paper]].

** 2. Fast math library for Common Lisp
:PROPERTIES:
:CUSTOM_ID: 2-fast-math-library-for-common-lisp
:END:

Common Lisp actually has [[https://gist.github.com/digikar99/16066dbf24b8789c969ea58837e0fbef][several numerical computing libraries]]. While many of them use BLAS/LAPACK/GSLL for linear algebra operations, there are no optimized operations in these libraries for basic mathematics. By basic mathematics, I mean addition, subtraction, multiplication, division. But even beyond them, there are other operations including floor, ceiling, round, absolute-value, exponentiation, logarithmic, as well as trigonometric, inverse trigonometric and their hyperbolic counterparts.

Moreover, most libraries (including in non Common Lisp ecosystems) fall short of [[https://gist.github.com/digikar99/ba2f0bb34021bfdc086b9c1c712ca228][my wishlist]]. Thus, I have been developing [[https://digikar99.github.io/numericals/][numericals and dense-numericals]] to fulfil this itch. I widely adopt:

- [[https://github.com/digikar99/bmas][BMAS]] backed by [[https://sleef.org/][SLEEF]], which uses SIMD operations to speed things up
- and more recently, [[https://eigen.tuxfamily.org/][Eigen]] backed by [[https://www.netlib.org/blas/][BLAS]] and [[https://www.netlib.org/lapack/][LAPACK]]

This is further coupled with multithreading using [[https://lparallel.org/][lparallel]] and the C-library builtin [[https://www.openmp.org/][OpenMP]].

numericals works with standard Common Lisp arrays, this means, you can use it in conjunction with any other Lisp array computing library that also works with Lisp arrays. You can read more about numericals and dense-numericals [[https://digikar99.github.io/numericals/][here]].

This line of work has actually spanned two C libraries. So, if you are a C developer and are looking for projects to contribute, here are two such projects.

- [[https://github.com/digikar99/bmas][BMAS]]: The ultimate goal is to provide a certain set of math operations across different SIMD platforms and for strided vectors. Currently, full support is only limited to AVX256.
- [[https://github.com/digikar99/ceigen_lite][ceigen_lite]]: [[https://eigen.tuxfamily.org/][Eigen]] is an excellent C++ library for numerical computing with vectors and matrices. ceigen_lite aims to provide a C interface to some of the common tasks that Eigen is capable of. In some sense, this will be a higher level interface to BLAS and LAPACK. Currently, this is just 20% complete. Besides, the compile times are enormous, so distributing the library as a binary would be great! But this has only so far been done for linux-amd64. Porting to other OS and architectures remains.
  
** 3. PELTADOT: PELTADOT Extends Lisp's Types And Dispatches Over Them
:PROPERTIES:
:CUSTOM_ID: 3-peltadot-peltadot-extends-lisps-types-and-dispatches-over-them
:END:

Despite being a great language, I have run into several issues while using Common Lisp to develop the numerical computing library described above:

1. *CLOS methods dispatch over common lisp classes but not types.* There does not seem to be any trivial way to adapt MOP to dispatch on types instead of classes. Thus, there is no way for ANSI common lisp to dispatch over specialized array types.
2. *ANSI common lisp does not allow defining user-defined compound types* similar to the builtin =(vector &optional element-type)= or =(integer &optional lower-limit higher-limit)=. Types defined using [[http://clhs.lisp.se/Body/m_deftp.htm][CL:DEFTYPE]] are what CLHS calls [[http://clhs.lisp.se/Body/26_glo_d.htm#derived_type][derived type]] specifiers, that is, mere abbreviations and simple combinations of existing types.
3. CLOS-based multiple dispatch might not be the best way to implement adhoc polymorphism compared to *traits*.
4. =cl:coerce= is non-extensible.

These issues were previously addressed using [[https://github.com/digikar99/polymorphic-functions][polymorphic-functions]], [[https://github.com/digikar99/extensible-compound-types][extensible-compound-types]], [[https://github.com/digikar99/extensible-optimizing-coerce][extensible-optimizing-coerce]], coupled with a number of add-ons and supporting libraries. Over time, these projects became more closely related than what was originally envisioned. Thus, PELTADOT is an attempt to bring all of them together to make maintenance, version control and dependency management easier. See [[https://gitlab.com/digikar/peltadot/][here]] for more information.

* Conda Lisp
:PROPERTIES:
:CUSTOM_ID: conda-lisp
:END:

Lately, I'm facing a growing need for a conda-forge like channel for Common Lisp libraries. Hopefully, this will be much simpler and easier to maintain than conda-forge. But, it still needs to be set up. Ping me if you can relate to this need.

The Conda Lisp channel will not only provide lisp libraries, but also lisp implementations. In addition, it will be possible for implementations and libraries to depend on non-lisp dependencies that are already a part of conda-forge. Version control and conflict resolution should also be handled well.

If you think anaconda is slow, you are not alone: developers have gotten together to create [[https://mamba.readthedocs.io/en/latest/installation/micromamba-installation.html][micromamba]]. If you think conda-build is slow, again, you are not alone; you should check out [[https://github.com/prefix-dev/rattler-build/][rattler-build]].

